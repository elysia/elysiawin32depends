// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_Protocol_5fMessageHeader_2eproto__INCLUDED
#define PROTOBUF_Protocol_5fMessageHeader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace Sirikata {
namespace Protocol {
namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Protocol_5fMessageHeader_2eproto();
void protobuf_AssignDesc_Protocol_5fMessageHeader_2eproto();
void protobuf_ShutdownFile_Protocol_5fMessageHeader_2eproto();

class Header;

enum Header_ReturnStatus {
  Header_ReturnStatus_SUCCESS = 0,
  Header_ReturnStatus_NETWORK_FAILURE = 1,
  Header_ReturnStatus_TIMEOUT_FAILURE = 3,
  Header_ReturnStatus_PROTOCOL_ERROR = 4,
  Header_ReturnStatus_PORT_FAILURE = 5,
  Header_ReturnStatus_UNKNOWN_OBJECT = 6
};
bool Header_ReturnStatus_IsValid(int value);
const Header_ReturnStatus Header_ReturnStatus_ReturnStatus_MIN = Header_ReturnStatus_SUCCESS;
const Header_ReturnStatus Header_ReturnStatus_ReturnStatus_MAX = Header_ReturnStatus_UNKNOWN_OBJECT;

const ::google::protobuf::EnumDescriptor* Header_ReturnStatus_descriptor();
inline const ::std::string& Header_ReturnStatus_Name(Header_ReturnStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_ReturnStatus_descriptor(), value);
}
inline bool Header_ReturnStatus_Parse(
    const ::std::string& name, Header_ReturnStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_ReturnStatus>(
    Header_ReturnStatus_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();
  
  Header(const Header& from);
  
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();
  void Swap(Header* other);
  
  // implements Message ----------------------------------------------
  
  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Header_ReturnStatus ReturnStatus;
  static const ReturnStatus SUCCESS = Header_ReturnStatus_SUCCESS;
  static const ReturnStatus NETWORK_FAILURE = Header_ReturnStatus_NETWORK_FAILURE;
  static const ReturnStatus TIMEOUT_FAILURE = Header_ReturnStatus_TIMEOUT_FAILURE;
  static const ReturnStatus PROTOCOL_ERROR = Header_ReturnStatus_PROTOCOL_ERROR;
  static const ReturnStatus PORT_FAILURE = Header_ReturnStatus_PORT_FAILURE;
  static const ReturnStatus UNKNOWN_OBJECT = Header_ReturnStatus_UNKNOWN_OBJECT;
  static inline bool ReturnStatus_IsValid(int value) {
    return Header_ReturnStatus_IsValid(value);
  }
  static const ReturnStatus ReturnStatus_MIN =
    Header_ReturnStatus_ReturnStatus_MIN;
  static const ReturnStatus ReturnStatus_MAX =
    Header_ReturnStatus_ReturnStatus_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ReturnStatus_descriptor() {
    return Header_ReturnStatus_descriptor();
  }
  static inline const ::std::string& ReturnStatus_Name(ReturnStatus value) {
    return Header_ReturnStatus_Name(value);
  }
  static inline bool ReturnStatus_Parse(const ::std::string& name,
      ReturnStatus* value) {
    return Header_ReturnStatus_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional bytes source_object = 1;
  inline bool has_source_object() const;
  inline void clear_source_object();
  static const int kSourceObjectFieldNumber = 1;
  inline const ::std::string& source_object() const;
  inline void set_source_object(const ::std::string& value);
  inline void set_source_object(const char* value);
  inline void set_source_object(const void* value, size_t size);
  inline ::std::string* mutable_source_object();
  
  // optional uint32 source_port = 3;
  inline bool has_source_port() const;
  inline void clear_source_port();
  static const int kSourcePortFieldNumber = 3;
  inline ::google::protobuf::uint32 source_port() const;
  inline void set_source_port(::google::protobuf::uint32 value);
  
  // optional bytes source_space = 1536;
  inline bool has_source_space() const;
  inline void clear_source_space();
  static const int kSourceSpaceFieldNumber = 1536;
  inline const ::std::string& source_space() const;
  inline void set_source_space(const ::std::string& value);
  inline void set_source_space(const char* value);
  inline void set_source_space(const void* value, size_t size);
  inline ::std::string* mutable_source_space();
  
  // optional bytes destination_object = 2;
  inline bool has_destination_object() const;
  inline void clear_destination_object();
  static const int kDestinationObjectFieldNumber = 2;
  inline const ::std::string& destination_object() const;
  inline void set_destination_object(const ::std::string& value);
  inline void set_destination_object(const char* value);
  inline void set_destination_object(const void* value, size_t size);
  inline ::std::string* mutable_destination_object();
  
  // optional uint32 destination_port = 4;
  inline bool has_destination_port() const;
  inline void clear_destination_port();
  static const int kDestinationPortFieldNumber = 4;
  inline ::google::protobuf::uint32 destination_port() const;
  inline void set_destination_port(::google::protobuf::uint32 value);
  
  // optional bytes destination_space = 1537;
  inline bool has_destination_space() const;
  inline void clear_destination_space();
  static const int kDestinationSpaceFieldNumber = 1537;
  inline const ::std::string& destination_space() const;
  inline void set_destination_space(const ::std::string& value);
  inline void set_destination_space(const char* value);
  inline void set_destination_space(const void* value, size_t size);
  inline ::std::string* mutable_destination_space();
  
  // optional int64 id = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 7;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional int64 reply_id = 8;
  inline bool has_reply_id() const;
  inline void clear_reply_id();
  static const int kReplyIdFieldNumber = 8;
  inline ::google::protobuf::int64 reply_id() const;
  inline void set_reply_id(::google::protobuf::int64 value);
  
  // optional .Sirikata.Protocol.Protocol.Header.ReturnStatus return_status = 1792;
  inline bool has_return_status() const;
  inline void clear_return_status();
  static const int kReturnStatusFieldNumber = 1792;
  inline ::Sirikata::Protocol::Protocol::Header_ReturnStatus return_status() const;
  inline void set_return_status(::Sirikata::Protocol::Protocol::Header_ReturnStatus value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* source_object_;
  static const ::std::string _default_source_object_;
  ::google::protobuf::uint32 source_port_;
  ::std::string* source_space_;
  static const ::std::string _default_source_space_;
  ::std::string* destination_object_;
  static const ::std::string _default_destination_object_;
  ::google::protobuf::uint32 destination_port_;
  ::std::string* destination_space_;
  static const ::std::string _default_destination_space_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 reply_id_;
  int return_status_;
  friend void  protobuf_AddDesc_Protocol_5fMessageHeader_2eproto();
  friend void protobuf_AssignDesc_Protocol_5fMessageHeader_2eproto();
  friend void protobuf_ShutdownFile_Protocol_5fMessageHeader_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Header

// optional bytes source_object = 1;
inline bool Header::has_source_object() const {
  return _has_bit(0);
}
inline void Header::clear_source_object() {
  if (source_object_ != &_default_source_object_) {
    source_object_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Header::source_object() const {
  return *source_object_;
}
inline void Header::set_source_object(const ::std::string& value) {
  _set_bit(0);
  if (source_object_ == &_default_source_object_) {
    source_object_ = new ::std::string;
  }
  source_object_->assign(value);
}
inline void Header::set_source_object(const char* value) {
  _set_bit(0);
  if (source_object_ == &_default_source_object_) {
    source_object_ = new ::std::string;
  }
  source_object_->assign(value);
}
inline void Header::set_source_object(const void* value, size_t size) {
  _set_bit(0);
  if (source_object_ == &_default_source_object_) {
    source_object_ = new ::std::string;
  }
  source_object_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_source_object() {
  _set_bit(0);
  if (source_object_ == &_default_source_object_) {
    source_object_ = new ::std::string;
  }
  return source_object_;
}

// optional uint32 source_port = 3;
inline bool Header::has_source_port() const {
  return _has_bit(1);
}
inline void Header::clear_source_port() {
  source_port_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Header::source_port() const {
  return source_port_;
}
inline void Header::set_source_port(::google::protobuf::uint32 value) {
  _set_bit(1);
  source_port_ = value;
}

// optional bytes source_space = 1536;
inline bool Header::has_source_space() const {
  return _has_bit(2);
}
inline void Header::clear_source_space() {
  if (source_space_ != &_default_source_space_) {
    source_space_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Header::source_space() const {
  return *source_space_;
}
inline void Header::set_source_space(const ::std::string& value) {
  _set_bit(2);
  if (source_space_ == &_default_source_space_) {
    source_space_ = new ::std::string;
  }
  source_space_->assign(value);
}
inline void Header::set_source_space(const char* value) {
  _set_bit(2);
  if (source_space_ == &_default_source_space_) {
    source_space_ = new ::std::string;
  }
  source_space_->assign(value);
}
inline void Header::set_source_space(const void* value, size_t size) {
  _set_bit(2);
  if (source_space_ == &_default_source_space_) {
    source_space_ = new ::std::string;
  }
  source_space_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_source_space() {
  _set_bit(2);
  if (source_space_ == &_default_source_space_) {
    source_space_ = new ::std::string;
  }
  return source_space_;
}

// optional bytes destination_object = 2;
inline bool Header::has_destination_object() const {
  return _has_bit(3);
}
inline void Header::clear_destination_object() {
  if (destination_object_ != &_default_destination_object_) {
    destination_object_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Header::destination_object() const {
  return *destination_object_;
}
inline void Header::set_destination_object(const ::std::string& value) {
  _set_bit(3);
  if (destination_object_ == &_default_destination_object_) {
    destination_object_ = new ::std::string;
  }
  destination_object_->assign(value);
}
inline void Header::set_destination_object(const char* value) {
  _set_bit(3);
  if (destination_object_ == &_default_destination_object_) {
    destination_object_ = new ::std::string;
  }
  destination_object_->assign(value);
}
inline void Header::set_destination_object(const void* value, size_t size) {
  _set_bit(3);
  if (destination_object_ == &_default_destination_object_) {
    destination_object_ = new ::std::string;
  }
  destination_object_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_destination_object() {
  _set_bit(3);
  if (destination_object_ == &_default_destination_object_) {
    destination_object_ = new ::std::string;
  }
  return destination_object_;
}

// optional uint32 destination_port = 4;
inline bool Header::has_destination_port() const {
  return _has_bit(4);
}
inline void Header::clear_destination_port() {
  destination_port_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Header::destination_port() const {
  return destination_port_;
}
inline void Header::set_destination_port(::google::protobuf::uint32 value) {
  _set_bit(4);
  destination_port_ = value;
}

// optional bytes destination_space = 1537;
inline bool Header::has_destination_space() const {
  return _has_bit(5);
}
inline void Header::clear_destination_space() {
  if (destination_space_ != &_default_destination_space_) {
    destination_space_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Header::destination_space() const {
  return *destination_space_;
}
inline void Header::set_destination_space(const ::std::string& value) {
  _set_bit(5);
  if (destination_space_ == &_default_destination_space_) {
    destination_space_ = new ::std::string;
  }
  destination_space_->assign(value);
}
inline void Header::set_destination_space(const char* value) {
  _set_bit(5);
  if (destination_space_ == &_default_destination_space_) {
    destination_space_ = new ::std::string;
  }
  destination_space_->assign(value);
}
inline void Header::set_destination_space(const void* value, size_t size) {
  _set_bit(5);
  if (destination_space_ == &_default_destination_space_) {
    destination_space_ = new ::std::string;
  }
  destination_space_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_destination_space() {
  _set_bit(5);
  if (destination_space_ == &_default_destination_space_) {
    destination_space_ = new ::std::string;
  }
  return destination_space_;
}

// optional int64 id = 7;
inline bool Header::has_id() const {
  return _has_bit(6);
}
inline void Header::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::int64 Header::id() const {
  return id_;
}
inline void Header::set_id(::google::protobuf::int64 value) {
  _set_bit(6);
  id_ = value;
}

// optional int64 reply_id = 8;
inline bool Header::has_reply_id() const {
  return _has_bit(7);
}
inline void Header::clear_reply_id() {
  reply_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(7);
}
inline ::google::protobuf::int64 Header::reply_id() const {
  return reply_id_;
}
inline void Header::set_reply_id(::google::protobuf::int64 value) {
  _set_bit(7);
  reply_id_ = value;
}

// optional .Sirikata.Protocol.Protocol.Header.ReturnStatus return_status = 1792;
inline bool Header::has_return_status() const {
  return _has_bit(8);
}
inline void Header::clear_return_status() {
  return_status_ = 0;
  _clear_bit(8);
}
inline ::Sirikata::Protocol::Protocol::Header_ReturnStatus Header::return_status() const {
  return static_cast< ::Sirikata::Protocol::Protocol::Header_ReturnStatus >(return_status_);
}
inline void Header::set_return_status(::Sirikata::Protocol::Protocol::Header_ReturnStatus value) {
  GOOGLE_DCHECK(::Sirikata::Protocol::Protocol::Header_ReturnStatus_IsValid(value));
  _set_bit(8);
  return_status_ = value;
}


}  // namespace Protocol
}  // namespace Protocol
}  // namespace Sirikata

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Sirikata::Protocol::Protocol::Header_ReturnStatus>() {
  return ::Sirikata::Protocol::Protocol::Header_ReturnStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_Protocol_5fMessageHeader_2eproto__INCLUDED
